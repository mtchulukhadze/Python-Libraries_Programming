
import numpy as np
def sigmoid(x):
    return 1/(1+np.exp(-x))

class LogisticRegression():
    def __init__(self, lr=0.001, n_iters=1000):
        self.lr = lr
        self.n_iters = n_iters
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape  # Corrected variable name 'features' to 'n_features'
        self.weights = np.zeros(n_features)  # Corrected variable name 'features' to 'n_features'
        self.bias = 0

        for _ in range(self.n_iters):
            linear_prediction = np.dot(X, self.weights) + self.bias
            prediction = sigmoid(linear_prediction)

            dw = (1/n_samples) * np.dot(X.T, (prediction - y))
            db = (1/n_samples) * np.sum(prediction - y)

            self.weights = self.weights - self.lr * dw
            self.bias = self.bias - self.lr * db

    def predict(self, X):
        linear_pred = np.dot(X, self.weights) + self.bias
        y_pred = sigmoid(linear_pred)
        class_pred = [0 if y<=0.5 else 1 for y in y_pred]
        return class_pred

X_train = np.array([[1, 2], [2, 3], [3, 4]])  # Replace this with your training data
y_train = np.array([0, 1, 0])  # Replace this with your training labels

model = LogisticRegression()
model.fit(X_train, y_train)

weights, bias = model.weights, model.bias


from sklearn.model_selection import train_test_split
from sklearn import datasets
import matplotlib.pyplot as plt

bc = datasets.load_breast_cancer()
X, y = bc.data, bc.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)

clf = LogisticRegression(lr=0.01)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

def accurancy(y_pred, y_test):
    return np.sum(y_pred==y_test)/len(y_test)

acc = accurancy(y_pred, y_test)
print(acc)
