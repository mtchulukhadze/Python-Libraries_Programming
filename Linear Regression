import numpy as np

class LinearRegression:
    def __init__(self, lr = 0.001, n_iters = 1000):
        self.lr = lr
        self.n_iters = n_iters
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.n_iters):
            y_pred = np.dot(X, self.weights) + self.bias

            dw = (1/n_samples) * np.dot(X.T, (y_pred-y))
            db = (1/n_samples) * np.sum(y_pred-y)

            self.weights = self.weights - self.lr * dw
            self.bias = self.bias - self.lr * db
        return self.weights, self.bias
        
    def predict(self, X):
        y_pred = np.dot(X, self.weights) + self.bias
        return y_pred


X = np.array([[1], [2], [3]])
y = np.array([2, 3, 4])

lr_model = LinearRegression()
weights, bias = lr_model.fit(X, y)
# weights, bias = lr_model.predict(X)
print(weights)
print(bias)

from sklearn.model_selection import train_test_split
from sklearn import datasets
import matplotlib.pyplot as plt

X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=20, random_state=1234)


reg = LinearRegression()
reg.fit(X_train, y_train)
predictions = reg.predict(X_test)

y_pred_line = reg.predict(X)

fig = plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], y, color='b')
plt.plot(X, y_pred_line)
plt.show()
